bool f = ((x ^ y) < 0); // true iff x and y have opposite signs
************************
The Bitwise Operators

Java defines several bitwise operators, which can be applied to the integer types, long, int, short, char, and byte.

Bitwise operator works on bits and performs bit-by-bit operation. Assume if a = 60 and b = 13; now in binary format they will be as follows âˆ’

a = 0011 1100
b = 0000 1101


a&b = 0000 1100 Binary AND Operator copies a bit to the result if it exists in both operands. 	(A & B) will give 12 which is 0000 1100

a|b = 0011 1101 Binary OR Operator copies a bit if it exists in either operand. 	(A | B) will give 61 which is 0011 1101

a^b = 0011 0001 Binary XOR Operator copies the bit if it is set in one operand but not both. 	(A ^ B) will give 49 which is 0011 0001

~a  = 1100 0011 Binary Ones Complement Operator is unary and has the effect of 'flipping' bits. 	(~A ) will give -61 which is 1100 0011 in 2's complement form due to a signed binary number.

A << 2 will give 240 which is 1111 0000. The left operands value is moved left by the number of bits specified by the right operand. 	
A >> 2 will give 15 which is 1111. 	Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand. 	
A >>>2 will give 15 which is 0000 1111 	Shift right zero fill operator. The left operands value is moved right by the number of bits specified by the right operand and shifted values are filled up with zeros. 	

******************************
